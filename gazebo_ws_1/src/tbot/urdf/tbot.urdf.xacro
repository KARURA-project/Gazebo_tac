<?xml version="1.0"?>
<robot name="tbot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Included URDF/XACRO Files -->
  <xacro:include filename="$(find tbot)/urdf/common.urdf.xacro" />
  <xacro:include filename="$(find tbot)/urdf/wheel.urdf.xacro" />
  <xacro:include filename="$(find tbot)/urdf/caster.urdf.xacro" />
  <xacro:include filename="$(find tbot)/urdf/lidar.urdf.xacro" />

  <!-- base_footprint Definition -->
  <link name="base_footprint" />

  <!-- base Definition -->
  <link name="base_link">
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <visual>
      <geometry>
        <box size="0.069 0.138 0.050"/>
      </geometry>
      <material name="White" />
    </visual>
    <inertial>
      <mass value="0.2" />
      <origin xyz="0 0 0" rpy="0 0 0" />
      <xacro:box_inertia m="0.2" x="0.069" y="0.138" z="0.050" />
    </inertial>
  </link>

  <gazebo reference="base_link">
    <material>Gazebo/White</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>

  <joint name="base_joint" type="fixed">
    <origin xyz="0 0 0.045" rpy="0 0 0" />
    <parent link="base_footprint" />
    <child  link="base_link" />
  </joint>

  <!-- body Definition -->
  <link name="body_link">
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <visual>
      <geometry>
        <cylinder radius="0.069" length="0.122" />
      </geometry>
      <material name="White" />
    </visual>
    <inertial>
      <mass value="0.3" />
      <origin xyz="0 0 0" rpy="0 0 0" />
        <xacro:cylinder_inertia  m="0.3" r="0.069" h="0.122" />
    </inertial>
  </link>

  <gazebo reference="body_link">
    <material>Gazebo/White</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>

  <joint name="body_joint" type="fixed">
    <origin xyz="-0.036 0 0.081" rpy="0 0 0" />
    <parent link="base_footprint" />
    <child  link="body_link" />
  </joint>

  <!-- Wheel Definitions -->
  <xacro:wheel sub="l" parent="base_footprint"
    transX="0" transY="0.080"  transZ="0.033" />
  <xacro:wheel sub="r" parent="base_footprint"
    transX="0" transY="-0.080"  transZ="0.033" />

  <!-- Caster Definition -->
  <xacro:caster sub="0" parent="base_footprint"
    transX="-0.080" transY="0" transZ="0.020" />


  

  <!-- Differential drive controller  -->
  <gazebo>
    <plugin name="differential_drive_controller"
      filename="libgazebo_ros_diff_drive.so">
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic> 
      <odometryFrame>odom</odometryFrame> 
      <odometrySource>world</odometrySource>
      <robotBaseFrame>base_footprint</robotBaseFrame>
      <publishOdomTF>true</publishOdomTF>
      <publishWheelTF>false</publishWheelTF>
      <publishTf>1</publishTf>
      <publishWheelJointState>false</publishWheelJointState>
      <legacyMode>false</legacyMode>
      <updateRate>30</updateRate>
      <leftJoint>wheel_l_joint</leftJoint>
      <rightJoint>wheel_r_joint</rightJoint>
      <wheelSeparation>0.160</wheelSeparation>
      <wheelDiameter>0.066</wheelDiameter>
      <wheelAcceleration>1.8</wheelAcceleration>
      <wheelTorque>10</wheelTorque>
      <rosDebugLevel>Debug</rosDebugLevel>
    </plugin>
  </gazebo> 

  
  <link name="gps_link" />
    <joint name="gps_joint" type="fixed">
      <parent link="base_link" />
      <child link="gps_link" />
    </joint>
    
  <gazebo>  
      <plugin name="gps" filename="libhector_gazebo_ros_gps.so">  
          <updateRate>10.0</updateRate>  
          <topicName>gps/fix</topicName>  
          <gaussianNoise>0.0 0.0 0.0</gaussianNoise>  
          <offset>0 0 0</offset>  
          <velocityGaussianNoise>0 0 0</velocityGaussianNoise>  
          <frameId>gps_link</frameId>  
      </plugin>  
  </gazebo>

  <!-- Camera -->
  <xacro:property name="camera_link" value="0.05" /> <!-- Size of square 'camera' box -->


  
  <joint name="camera_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0.0 0.0 0.17" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="camera_link"/>
  </joint>
  
  <link name="camera_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
      <material name="red"/>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>


   <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>640</width>
          <height>320</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

</robot>
